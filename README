BlitzWinApi is a wrapper api function to facilitate working with these same functions. With it, you can use WinApi from blitz3d and blitzplus.
Current version: 0.50

Terms of distribution. Wrapper is distributed freely. You can use it as a non-commercial and [b] commercial [/ b] projects. The only prerequisite is the indication of the name of the library and the name of the author. Also, if used in a [b] commercial [/ b] project, you need to coordinate this with me (I won’t ask for money). If the project complies with my moral beliefs, then there should be no problems. Simply put, if the project does not have a hint of racial, sexual and other descrimnation, if the project does not contain explicit erotic scenes, bullying in a rude form, is not an advertisement of a politician, then everything will be ok :)

Commands:

- work with windows
hWnd - window identifier if 0 then it is equal to the start window of the program;

bGetActiveWindow () - returns the descriptor (identifier) ​​of the active window;
bSetActiveWindow (hWnd% = 0) activates the hWnd window.
bWindowFromPoint (x%, y%) - returns the window handle (identifier) ​​under the specified point
bFindWindow (caption $) - returns a window handle with a caption equal to the caption. 0 if the window is not found
bGetDesktop () - returns the descriptor (identifier) ​​of the desktop;
bDragAcceptFiles (hWnd% = 0) - activate drag and drop window receiving of files
bHideWindow (hWnd% = 0) - makes the window invisible
bShowWindow (hWnd% = 0) - makes an invisible window visible and activates it.
bFlashWindow (time, hWnd% = 0) - causes the window title to flicker. time - the interval between the backlight.
bSetWindowAlpha (alpha, hWnd% = 0) - sets the transparency of the alpha window varies from 0 to 255 (0 window is completely transparent, 255 window is completely opaque)
bFreeWindowAlpha (hWnd% = 0) - removes window transparency
bDisableExitButton (hWnd% = 0) - disables the close button on the window and clears the close option in the header menu
bWindowIsActive (hWnd% = 0) - returns 1 if the hWnd window is active and 0 if it is not.
bGetWindowX (hWnd% = 0) - returns the X coordinate of the window
bGetWindowY (hWnd% = 0) - returns the Y coordinate of the window
bGetWindowRight (hWnd% = 0) - returns the X coordinate of the right side of the window
bGetWindowBottom (hWnd% = 0) - returns the Y coordinate of the bottom side of the window
bGetWindowWidth (hWnd% = 0) - returns the width of the window
bGetWindowHeight (hWnd% = 0) - returns the height of the window
bScreenWidth () - returns the current display width
bScreenHeight () - returns the current display height
bCreateRectRegion (l%, t%, r%, b%) - creates a rectangular region l, t, r, b - coordinates of the left, upper, right and lower borders of the region, respectively, returns the handle of the region
bSetWindowRegion (region%, hwnd%) - sets the visible rectangular region of the window to return 0 if an error occurs and 1 if successful

- mouse
bGlobalMouseX () - returns the global X coordinate of the mouse
bGlobalMouseY () - returns the global Y coordinate of the mouse
bSetMousePos (x%, y%) - sets the new position of the mouse
bSwapMouseButton (swap) - swaps mouse buttons (the 1-right button becomes the left, 0 is the opposite). The function changes the buttons in all programs, so we don’t forget to call bSwapMouseButton (0) at the end of the work.
bSetPointer (pointer, hWnd = 0) - changes the mouse pointer. pointer takes the value of one of the following constants: POINTER_APPSTARTING, POINTER_ARROW, POINTER_CROSS, POINTER_IBEAM, POINTER_NO, POINTER_SIZEALL, POINTER_SIZENESW, POINTER_SIZENS, POINTER_SIZENWSE, POINTER_SIZEWE, POINTER_SIZENS, POINTER_SIZENWSE, POINTER_SIZEWE, POINTER_SIZENS, POINTER_SIZENWSE, POINTER_SIZEWE, POINTER_SIZENS, POINTER_SIZENWSE, POINTER_SIZEWALL, POINTER_SIZENS, POINTER_SIZENWSE, POINTER_SIZEALL, POINTER_SIZENS, POINTER_SIZENWSE
POINTER_WAIT.
bSetImagePointer (image $, hWnd = 0) - Changes the mouse pointer over the image from the file "* .cur" and "* .ani" (animated) image - the full path to the image.

- system
bGetComputerName $ () - returns the name of the computer
bGetUserName $ () - returns the name of the active user
bRAMTotal () - the amount of RAM
bRAMAvail () - the available amount of RAM
bRAMUsage () is the percentage of RAM usage
bPageTotal () - paging file size
bPageAvail () - available paging file
bVirtualTotal () - the amount of virtual memory
bVirtualAvail () - the available amount of virtual memory
bShell (path $, cmd $, show%, hWnd) - extended analog ExexFile () path - file path (if you specify a non-executable file, the application will open by default for this file), cmd - additional parameters, show - takes the value of one of the constants: SW_HIDE (Do not display the window), SW_SHOWMAXIMIZED (Display and maximize the display), SW_SHOWMINIMIZED (Display and minimize), SW_SHOWMINNOACTIVE (Display, minimize and not transfer the focus), SW_SHOWNOACTIVATE (view, apply, and make it out of a view; pass the focus)

-buffer
bGetClipboardText $ (buffer = 1024, hWnd% = 0) - take text from clipboard windows buffer - text length
bSetClipboardText $ (txt $, hWnd% = 0) - put text into windows clipboard

- dialog boxes
bRequestColor (r = 0, g = 0, b = 0, hWnd% = 0) - call the dialog box for choosing the color. Use bRequestRed (), bRequestGreen (), bRequestBlue () for the semi
